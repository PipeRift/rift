name: build

on:
  push:
  pull_request:

jobs:
  Build:
    name: ${{ matrix.os-name }} (${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [windows-msvc, windows-clang, linux-clang, linux-gcc, macos-clang]
        include:
          - name: windows-msvc
            os: windows-latest
            os-name: windows
            triplet: x64-windows
            compiler: msvc
            cxx: cl
            cc: cl
          - name: windows-clang
            os: windows-latest
            os-name: windows
            triplet: x64-windows
            compiler: clang
            cxx: clang-cl
            cc: clang-cl
          - name: linux-clang
            os: ubuntu-latest
            os-name: linux
            triplet: x64-linux
            compiler: clang
            cxx: clang++
            cc: clang
          - name: linux-gcc
            os: ubuntu-latest
            os-name: linux
            triplet: x64-linux
            compiler: gcc
            cxx: g++-10
            cc: gcc-10
          - name: macos-clang
            os: macos-latest
            os-name: macos
            triplet: x64-osx
            compiler: clang
            cxx: clang++
            cc: clang


    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Init Submodules
        uses: snickerbockers/submodules-init@v4

      - name: Install dependencies
        if: ${{ matrix.os-name == 'linux'}}
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential xz-utils curl libx11-dev xorg-dev libglu1-mesa-dev

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/llvm
          key: llvm-13.0

      - name: Install LLVM
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "13.0"
          directory: ${{ runner.temp }}/llvm
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Set Compiler Environment
        uses: lukka/set-shell-env@v1
        with:
          CXX: ${{ matrix.cxx }}
          CC: ${{ matrix.cc }}

      - name: Get vcpkg
        uses: lukka/run-vcpkg@v7
        id: runvcpkg
        with:
          setupOnly: true
          vcpkgDirectory: '${{ github.workspace }}/Extern/vcpkg'
          vcpkgTriplet: '${{ matrix.triplet }}'

      - name: Build Release
        uses: lukka/run-cmake@v3.3
        with:
          cmakeGenerator: 'Ninja'
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeBuildType: Release
          buildWithCMakeArgs: --config Release
          buildDirectory: 'Build'
          useVcpkgToolchainFile: true
          vcpkgTriplet: ${{ matrix.triplet }}

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v2
        if: ${{ matrix.compiler == 'clang'}} # Only clang artifacts are stored
        with:
          name: rift-${{ matrix.name }}
          path: Build/Bin

      - name: Build Debug
        uses: lukka/run-cmake@v3.3
        id: runcmake
        with:
          cmakeGenerator: 'Ninja'
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeBuildType: Debug
          buildWithCMakeArgs: --config Debug
          buildDirectory: 'Build'
          useVcpkgToolchainFile: true
          vcpkgTriplet: ${{ matrix.triplet }}

      - name: Configure
        run: cmake -B Build -S . -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/Extern/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build Debug
        run: cmake --build Build --config Debug

      - name: Run Tests
        working-directory: ./Build
        run: ctest --output-on-failure -j2 -C Debug